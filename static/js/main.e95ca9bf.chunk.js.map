{"version":3,"sources":["pages/Home/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Home","React","useState","maskDatas","setMaskDatas","lat","lng","nowCenter","SetNowCenter","getWhereMask","a","axios","get","then","res","data","features","useEffect","navigator","geolocation","getCurrentPosition","pos","crd","coords","console","log","latitude","longitude","accuracy","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","center","length","style","width","position","left","right","top","bottom","className","Map","zoom","maxZoom","TileLayer","attribution","url","Marker","icon","divIcon","html","renderToStaticMarkup","fontSize","showCoverageOnHover","spiderfyDistanceMultiplier","disableClusteringAtZoom","map","mask","idx","coordinates","geometry","properties","mask_adult","mask_child","name","updated","id","backgroundColor","padding","borderRadius","Popup","App","document","title","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"+VA8IeA,EApIF,WAAO,IAAD,EACiBC,IAAMC,SAAS,IADhC,mBACVC,EADU,KACCC,EADD,OAEiBH,IAAMC,SAAS,CAAEG,IAAK,GAAIC,IAAK,KAFhD,mBAEVC,EAFU,KAECC,EAFD,KAGXC,EAAY,uCAAG,4BAAAC,EAAA,sEACDC,IAAMC,IAN1B,8EAMuCC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QADlC,OACbD,EADa,OAEnBV,EAAaU,EAAIE,UAFE,2CAAH,qDAKlBf,IAAMgB,WAAU,WA0BdC,UAAUC,YAAYC,oBAjBtB,SAAiBC,GACf,IAAIC,EAAMD,EAAIE,OAEdC,QAAQC,IAAI,6BACZD,QAAQC,IAAI,cAAgBH,EAAII,UAChCF,QAAQC,IAAI,cAAgBH,EAAIK,WAChCH,QAAQC,IAAI,gBAAkBH,EAAIM,SAAW,YAC7CpB,EAAa,CACXH,IAAKgB,EAAIE,OAAOG,SAChBpB,IAAKe,EAAIE,OAAOI,eAIpB,SAAeE,GACbL,QAAQM,KAAK,SAAWD,EAAIE,KAAO,MAAQF,EAAIG,WAtBnC,CAGZC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,IAqBd1B,MACC,IACH,IAAI2B,EAAwB,EAAE7B,EAAUF,KAAME,EAAUD,KACxD,OACE,6BACwB,IAArBH,EAAUkC,QACT,yBACEC,MAAO,CACLC,MAAO,OACPC,SAAU,WACVC,KAAM,MACNC,MAAO,MACPC,IAAK,MACLC,OAAQ,QAGV,yBAAKC,UAAU,WAAf,2EAGkB,IAArB1C,EAAUkC,QACT,kBAACS,EAAA,EAAD,CAAKV,OAAQA,EAAQW,KAAM,GAAIC,QAAS,IACtC,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAEN,kBAACC,EAAA,EAAD,CACEZ,SAAUJ,EACViB,KAAMC,kBAAQ,CACZC,KAAMC,+BAAqB,yBAAKlB,MAAO,CAAEmB,SAAU,KAAxB,qBAG/B,kBAAC,IAAD,CACEC,qBAAqB,EACrBC,2BAA4B,EAC5BC,wBAAyB,IAExBzD,EAAU0D,KAAI,SAACC,EAAMC,GAAS,IAEfC,EAGVF,EAHFG,SAAYD,YAFc,EAKxBF,EAFFI,WAAcC,EAHY,EAGZA,WAAYC,EAHA,EAGAA,WAAYC,EAHZ,EAGYA,KAAMC,EAHlB,EAGkBA,QAGxC9B,GADFsB,EADFS,GAEeP,GAajB,OACE,6BACE,kBAACZ,EAAA,EAAD,CACEZ,SAAU,CAACA,EAAS,GAAIA,EAAS,IACjCa,KAAMC,kBAAQ,CACZC,KAAMC,+BACJ,yBACElB,MAAO,CACLkC,gBAAiB,OACjBjC,MAAO,GACPkC,QAAS,WACTC,aAAc,KAGhB,uBAAG7B,UAAU,QAAb,6BAA2BsB,GAC3B,uBAAGtB,UAAU,QAAb,iBAAyBuB,QAK/B,kBAACO,EAAA,EAAD,KACE,6BACE,4CAAQN,GACR,wDAAUC,cChHnBM,G,MANH,WAEV,OADAC,SAASC,MAAQ,iCAEf,kBAAC,EAAD,QCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASR,SAASS,eAAe,SD6H3C,kBAAmBpE,WACrBA,UAAUqE,cAAcC,MAAM3E,MAAK,SAAA4E,GACjCA,EAAaC,kB","file":"static/js/main.e95ca9bf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { renderToStaticMarkup } from \"react-dom/server\";\r\nimport L, { divIcon } from \"leaflet\";\r\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\r\n\r\nlet maskUrl =\r\n  \"https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json\";\r\n\r\nconst Home = () => {\r\n  const [maskDatas, setMaskDatas] = React.useState([]);\r\n  const [nowCenter, SetNowCenter] = React.useState({ lat: \"\", lng: \"\" });\r\n  const getWhereMask = async () => {\r\n    const res = await axios.get(maskUrl).then(res => res.data);\r\n    setMaskDatas(res.features);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    var options = {\r\n      // enableHighAccuracy: Takes a boolean value and defaults to false. Indicates if the position information should be                            as accurate as possible (more accuracy may be more costly in terms of CPU and battery usage).\r\n      // enableHighAccuracy: 預設為 false 取近似值(誤差在一個城市街區內)，true 表示來自 GPS 優點高精準度，缺點耗電\r\n      enableHighAccuracy: true,\r\n      timeout: 5000, //等待時間不超過5秒\r\n      maximumAge: 0 //每次都檢查最新的位置\r\n    };\r\n\r\n    function success(pos: any) {\r\n      var crd = pos.coords;\r\n\r\n      console.log(\"Your current position is:\");\r\n      console.log(\"Latitude : \" + crd.latitude);\r\n      console.log(\"Longitude: \" + crd.longitude);\r\n      console.log(\"More or less \" + crd.accuracy + \" meters.\");\r\n      SetNowCenter({\r\n        lat: pos.coords.latitude,\r\n        lng: pos.coords.longitude\r\n      });\r\n    }\r\n\r\n    function error(err: any) {\r\n      console.warn(\"ERROR(\" + err.code + \"): \" + err.message);\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(success, error, options);\r\n    getWhereMask();\r\n  }, []);\r\n  let center: L.LatLngTuple = [+nowCenter.lat, +nowCenter.lng];\r\n  return (\r\n    <div>\r\n      {maskDatas.length === 0 && (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            position: \"absolute\",\r\n            left: \"50%\",\r\n            right: \"50%\",\r\n            top: \"50%\",\r\n            bottom: \"50%\"\r\n          }}\r\n        >\r\n          <div className=\"d-block\">口罩哩麥造，努力讀取中 ...</div>\r\n        </div>\r\n      )}\r\n      {maskDatas.length !== 0 && (\r\n        <Map center={center} zoom={14} maxZoom={18}>\r\n          <TileLayer\r\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          />\r\n          <Marker\r\n            position={center}\r\n            icon={divIcon({\r\n              html: renderToStaticMarkup(<div style={{ fontSize: 20 }}>📌</div>)\r\n            })}\r\n          />\r\n          <MarkerClusterGroup\r\n            showCoverageOnHover={false}\r\n            spiderfyDistanceMultiplier={1}\r\n            disableClusteringAtZoom={15}\r\n          >\r\n            {maskDatas.map((mask, idx) => {\r\n              const {\r\n                geometry: { coordinates },\r\n                properties: { mask_adult, mask_child, name, updated },\r\n                id\r\n              } = mask;\r\n              const position = coordinates;\r\n              //   const propertiesProps: {\r\n              //     id: number;\r\n              //     name: String;\r\n              //     phone: String;\r\n              //     address: String;\r\n              //     mask_adult: number;\r\n              //     mask_child: number;\r\n              //     updated: String;\r\n              //     available: String;\r\n              //     note: String;\r\n              //     mark_delivered: number;\r\n              //   } = properties;\r\n              return (\r\n                <div>\r\n                  <Marker\r\n                    position={[position[1], position[0]]}\r\n                    icon={divIcon({\r\n                      html: renderToStaticMarkup(\r\n                        <div\r\n                          style={{\r\n                            backgroundColor: \"#fff\",\r\n                            width: 80,\r\n                            padding: \"1px 10px\",\r\n                            borderRadius: 12\r\n                          }}\r\n                        >\r\n                          <p className=\"mb-0\">👬🏼: {mask_adult}</p>\r\n                          <p className=\"mb-0\">👶: {mask_child}</p>\r\n                        </div>\r\n                      )\r\n                    })}\r\n                  >\r\n                    <Popup>\r\n                      <div>\r\n                        <p>店名: {name}</p>\r\n                        <p>更新時間: {updated}</p>\r\n                        {/* <p>👬🏼: {properties.mask_adult}</p> */}\r\n                        {/* <p>👶: {properties.mask_child}</p> */}\r\n                        {/* <p>店名: {properties.name}</p> */}\r\n                        {/* <p>店名: {properties.name}</p> */}\r\n                        {/* <p>店名: {properties.name}</p> */}\r\n                      </div>\r\n                    </Popup>\r\n                  </Marker>\r\n                </div>\r\n              );\r\n            })}\r\n          </MarkerClusterGroup>\r\n        </Map>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport Home from './pages/Home'\nimport './App.css';\n\nconst App = () => {\n  document.title = '口罩哩麥造'\n  return (\n    <Home />\n  )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}