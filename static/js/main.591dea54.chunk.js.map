{"version":3,"sources":["pages/Home/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["Home","React","useState","maskDatas","setMaskDatas","rapidTest","setRapidTest","lat","lng","nowCenter","SetNowCenter","parseCsvToJson","arr","headings","reduce","acc","data","obj","entries","index","getWhereMask","a","axios","get","then","res","features","getRapidTest","fetch","response","reader","body","getReader","decoder","TextDecoder","read","result","decode","value","ab","ac","Papa","parse","rapidTestJson","i","length","latlng","bubbleSort","properties","mask_adult","mask_child","name","updated","geometry","coordinates","console","log","str","left","right","id","useEffect","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","accuracy","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","center","style","width","position","top","bottom","className","Map","zoom","maxZoom","TileLayer","attribution","url","Marker","icon","divIcon","html","renderToStaticMarkup","fontSize","showCoverageOnHover","spiderfyDistanceMultiplier","disableClusteringAtZoom","map","mask","backgroundColor","padding","borderRadius","Popup","App","document","title","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.591dea54.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport L, { divIcon } from \"leaflet\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\nimport Papa from \"papaparse\";\n\n/**\n * 口罩藥局清單來源\n * @see https://raw.githubusercontent.com/kiang/pharmacies/master/json/points.json\n */\nlet maskUrl = \"/assets/mask.json\";\n\nconst Home = () => {\n  const [maskDatas, setMaskDatas] = React.useState<Array<any>>([]);\n  const [rapidTest, setRapidTest] = React.useState<Array<any>>([]);\n  const [nowCenter, SetNowCenter] = React.useState({ lat: \"\", lng: \"\" });\n\n  /**\n   * 取得 csv\n   */\n  const fetchCsv = () => {\n    // 檔案路徑 public/assets/abc.csv\n    return fetch(\"/assets/rapid-test.csv\").then(function (response: any) {\n      let reader = response.body.getReader();\n      let decoder = new TextDecoder(\"utf-8\");\n\n      return reader.read().then(function (result: any) {\n        return decoder.decode(result.value);\n      });\n    });\n  };\n\n  /**\n   * CSV 解析成物件\n   */\n  function parseCsvToJson(arr: any) {\n    const [headings, ...data] = arr;\n    return data.reduce((acc: any, data: any) => {\n      const obj = {} as any;\n      for (const [index, heading] of headings.entries()) {\n        obj[heading] = data[index];\n      }\n      return [...acc, obj];\n    }, []);\n  }\n\n  /**\n   * 轉半形字元\n   */\n  function toSBC(str: string) {\n    var result = \"\";\n    var len = str.length;\n    for (var i = 0; i < len; i) {\n      var cCode = str.charCodeAt(i);\n      //全形與半形相差（除空格外）：65248（十進位制）\n      cCode = cCode >= 0xff01 && cCode <= 0xff5e ? cCode - 65248 : cCode;\n      //處理空格\n      cCode = cCode === 0x03000 ? 0x0020 : cCode;\n      result = String.fromCharCode(cCode);\n    }\n    return result;\n  }\n  /**\n   * 取得口罩藥局清單\n   */\n  const getWhereMask = async () => {\n    const res = await axios.get(maskUrl).then((res) => res.data);\n    setMaskDatas(res.features);\n  };\n  /**\n   * 取得快篩實名制藥局清單\n   */\n  const getRapidTest = async () => {\n    const ab = await fetchCsv();\n    const ac = Papa.parse(ab);\n    const rapidTestJson = parseCsvToJson(ac.data);\n    const result = [...rapidTestJson] as any;\n    for (let i = 0; i < rapidTestJson.length; i++) {\n      let latlng = bubbleSort(rapidTestJson[i][\"醫事機構代碼\"]);\n      // 如果沒有找到經緯度，移除陣列\n      // if (latlng === undefined) {\n      //   result.splice(i);\n      //   continue;\n      // }\n      result[i].properties = {\n        mask_adult: result[i]['藥局電話'],\n        mask_child: result[i]['藥局地址'],\n        name: result[i]['藥局名稱'],\n        updated: \"\",\n      };\n      result[i].geometry = {\n        coordinates: latlng,\n      };\n    }\n    console.log(result);\n    setRapidTest(result);\n  };\n\n  /**\n   * 泡泡演算法，在 maskDatas 資料中尋找地址的經緯度\n   * @param str - 傳入醫事機構代碼\n   */\n  function bubbleSort(str: string) {\n    let left = 0;\n    let right = maskDatas.length - 1;\n    while (left <= right) {\n      if (maskDatas[left].properties.id === str) {\n        return maskDatas[left].geometry.coordinates;\n      }\n      left++;\n    }\n  }\n\n  function getCurrentPosition() {\n    var options = {\n      // enableHighAccuracy: Takes a boolean value and defaults to false. Indicates if the position information should be                            as accurate as possible (more accuracy may be more costly in terms of CPU and battery usage).\n      // enableHighAccuracy: 預設為 false 取近似值(誤差在一個城市街區內)，true 表示來自 GPS 優點高精準度，缺點耗電\n      enableHighAccuracy: true,\n      timeout: 5000, //等待時間不超過5秒\n      maximumAge: 0, //每次都檢查最新的位置\n    };\n\n    function success(pos: any) {\n      var crd = pos.coords;\n\n      console.log(\"Your current position is:\");\n      console.log(\"Latitude : \" + crd.latitude);\n      console.log(\"Longitude: \" + crd.longitude);\n      console.log(\"More or less \" + crd.accuracy + \" meters.\");\n      SetNowCenter({\n        lat: pos.coords.latitude,\n        lng: pos.coords.longitude,\n      });\n    }\n\n    function error(err: any) {\n      console.warn(\"ERROR(\" + err.code + \"): \" + err.message);\n    }\n\n    navigator.geolocation.getCurrentPosition(success, error, options);\n  }\n\n  React.useEffect(() => {\n    getCurrentPosition();\n    getWhereMask();\n  }, []);\n\n  /**\n   * 當 maskDatas 有資料時，才呼叫取得快篩實名制藥局清單\n   */\n  React.useEffect(() => {\n    if (maskDatas.length !== 0) {\n      getRapidTest();\n    }\n  }, [maskDatas]);\n\n  let center: L.LatLngTuple = [+nowCenter.lat, +nowCenter.lng];\n  return (\n    <div>\n      {rapidTest.length === 0 && (\n        <div\n          style={{\n            width: \"100%\",\n            position: \"absolute\",\n            left: \"50%\",\n            right: \"50%\",\n            top: \"50%\",\n            bottom: \"50%\",\n          }}\n        >\n          <div className=\"d-block\">讀取快篩實名制藥局清單中 ...</div>\n        </div>\n      )}\n      {rapidTest.length !== 0 && (\n        <Map center={center} zoom={14} maxZoom={18}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <Marker\n            position={center}\n            icon={divIcon({\n              html: renderToStaticMarkup(\n                <div style={{ fontSize: 20 }}>📌</div>\n              ),\n            })}\n          />\n          <MarkerClusterGroup\n            showCoverageOnHover={false}\n            spiderfyDistanceMultiplier={1}\n            disableClusteringAtZoom={15}\n          >\n            {rapidTest.map((mask) => {\n              const {\n                geometry: { coordinates },\n                properties: { mask_adult, mask_child, name, updated },\n              } = mask;\n              const position = coordinates;\n              if (!coordinates) {\n                return null;\n              }\n\n              return (\n                <div>\n                  <Marker\n                    position={[position[1], position[0]]}\n                    icon={divIcon({\n                      html: renderToStaticMarkup(\n                        <div\n                          style={{\n                            backgroundColor: \"#fff\",\n                            width: 80,\n                            padding: \"1px 10px\",\n                            borderRadius: 12,\n                          }}\n                        >\n                          <p className=\"mb-0\">👬🏼: {name}</p>\n                          <p className=\"mb-0\">👬🏼: {mask_adult}</p>\n                          <p className=\"mb-0\">👶: {mask_child}</p>\n                        </div>\n                      ),\n                    })}\n                  >\n                    <Popup>\n                      <div>\n                        <p>店名: {name}</p>\n                        <p>更新時間: {updated}</p>\n                        {/* <p>👬🏼: {properties.mask_adult}</p> */}\n                        {/* <p>👶: {properties.mask_child}</p> */}\n                        {/* <p>店名: {properties.name}</p> */}\n                        {/* <p>店名: {properties.name}</p> */}\n                        {/* <p>店名: {properties.name}</p> */}\n                      </div>\n                    </Popup>\n                  </Marker>\n                </div>\n              );\n            })}\n          </MarkerClusterGroup>\n        </Map>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Home from './pages/Home'\nimport './App.css';\n\nconst App = () => {\n  document.title = '快篩實名制藥局地圖'\n  return (\n    <Home />\n  )\n}\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}